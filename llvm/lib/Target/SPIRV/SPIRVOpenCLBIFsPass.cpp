#include "SPIRV.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Demangle/Demangle.h"
#include "SPIRVOpenCLBIFs.h"
#include "SPIRVGenOpenCLBuiltins.inc"
#include "SPIRV.h"
#include "SPIRVEnums.h"
#include "SPIRVExtInsts.h"
#include "SPIRVRegisterInfo.h"
#include "SPIRVStrings.h"
#include <functional> // For std::function

#include "llvm/ADT/SmallVector.h"
#include "llvm/CodeGen/GlobalISel/MachineIRBuilder.h"


#include <map>
#include <string>
#include <vector>

using namespace llvm;

#define DEBUG_TYPE "openclbifs-spirv-pass"


//Idea: Demangle function first, based on name invoke the functions in GenSPIRVOpenCLBuiltins.cpp
//Try mapping function name with functions generated by tablegen
//function includes whatever I want to use 'SPIRV openclbifs
//This includes into call lowering
//If function does not map, default to OpenCLBIFs.cpp

//namespace{
//struct OpenCLBIF{
//static string functionName = DemangleName(LineInfo.FunctionName, Info)

//}
void gitrandom(){

}


//Uncomment this for the print method
//must be implemented by “analyses” in order to print a human readable version of the analysis results.
//This is useful for debugging an analysis itself
//Use the opt -analyze argument to invoke this method.
//virtual void print(llvm::raw_ostream &O, const Module *M) const;
